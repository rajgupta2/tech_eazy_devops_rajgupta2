name: 'Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read

jobs:
  deploy_with_terraform:
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Clone your repo code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          output-format: json

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: '1.12.2'

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -var "stage=${{ inputs.stage }}" --auto-approve

    - name: Validate app health
      run: |
       EC2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=webserver-techeazy" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
       echo "Waiting 60 seconds for the application to initialize..."
       sleep 30
       echo "Wait Completed. Checking frontend application health on port 80..."
       if curl -f "http://${EC2_IP}"; then
          echo "SUCCESS: application is healthy and responding on port 80."
       else
          echo "FAILURE: application is not responding or returned an error."
          exit 1 # Fail the step if the curl command fails.
       fi
